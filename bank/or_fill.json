{
  "item1": {"parameter": {"slack": "松弛变量", "artificial": "人工变量"},
  "template": " 可以增加{{slack}} 和 {{artificial}} 将任意线性规划问题转化为标准形式;",
  "realm": "linear programming"},
  "item2": {"parameter": {"minimum": "最小元素法", "vogel": "Vogel 法"},
  "template": "运输问题可用{{minimum}} 或{{vogel}} 获得初始基可行解, 无需人工变量;",
  "realm": "transportation"},
  "item3": {"parameter": {"condition": "", "goal": "", "dv": ""},
  "template": "目标规划中, 要求${{condition}}$，对应目标约束是{{goal}} , 在目标函数中最小化偏差变量{{dv}};",
  "realm": "goal programming"},
  "item4": {"parameter": {"slack": "松弛变量", "artificial": "非基变量"},
  "template": "对偶问题的{{slack}}对应原问题的原变量, 对偶问题的{{nonbase}}对应原问题的基变量，反之亦然;",
  "realm": "dual principle"},
  "item5": {"parameter": {"matrix": "0,1,-2;-1,0,1;2,-1,0", "yesno": "无"},
  "template": "改进“石头-剪刀-布”游戏规则：若石头、剪刀赢得1分，若布赢得2分. 写出的赢得矩阵{{matrix}}; 有无纯策略? {{yesno}} ;",
  "realm": "game theory"},
  "item6": {"parameter": {"simplex": "单纯形法"},
  "template": "线性规划最著名的通用解法是1947年Danzig提出的{{simplex}};",
  "realm": "simplex method"},
  "item7": {"parameter": {"path": "闭回路法", "dual": "对偶法（位势法）", "path_":"闭回路"},
  "template": "运输问题用{{path}}或{{dual}}判断解是否最优; 接着利用{{path_}}改进解;",
  "realm": "transportation"},
  "item8": {"parameter": {"matrix": "0,1,-1;-1,0,1;1,-1,0", "yesno": "无"},
  "template": "“人-枪-狼”游戏规则：人胜枪，枪胜狼，狼胜人，胜得1分，输得-1分. 写出赢得矩阵{{matrix}}有无纯策略?  {{yesno}} ;",
  "realm": "game theory"},
  "item8": {"parameter": {"matrix": "0,1,-1;-1,0,1;1,-1,0", "yesno": "无"},
  "template": "“美女-英雄-流氓”游戏规则：美女胜英雄，英雄胜流氓，流氓胜美女，胜得1分，输得-1分. 写出赢得矩阵{{matrix}}有无纯策略?  {{yesno}} ;",
  "realm": "game theory"},
  "item9": {"parameter": {"solution":"基可行解"},
  "template": "线性规划问题可行域的凸集顶点与线性规划问题的{{solution}}一一对应;",
  "realm": "linear programming"},
  "item10": {"parameter": {"M":"大M法", "two":"两阶段法"},
  "template": "引入人工变量的线性规划问题可以通过{{M}}或{{two}}求解;",
  "realm": "linear programming"},
  "item11": {"parameter": {"maximin":"悲观准则", "maximax":"乐观准则", "compromise":"折中准则"},
  "template": "请写出至少三种不确定决策准则:{{maximin}}、{{maximax}}、{{compromise}};",
  "realm": "decision theory"},
  "item12": {"parameter": {"fibonacci":"Fibonacci法", "golden":"0.618法"},
  "template": "写出两种单峰函数一维搜索算法:{{fibonacci}}、{{golden}};",
  "realm": "nonlinear programming"},
  "item13": {"parameter": {"outer":"罚函数法", "inner":"障碍函数法"},
  "template": "将约束问题转化成无约束问题的制约函数法包括:{{outer}}、{{inner}};",
  "realm": "nonlinear programming"},
  "item14": {"parameter": {"direction":"方向", "step":"步长"},
  "template": "下降迭代算法每一次迭代包含确定{{direction}}和计算{{step}}两个主要步骤;",
  "realm": "nonlinear programming"}
}